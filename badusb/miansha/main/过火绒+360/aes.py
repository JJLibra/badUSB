import base64
from Crypto.Cipher import AES


class EncryptDate:
    def __init__(self, key, iv):
        self.key = key.encode("utf-8")  # 初始化密钥
        self.iv = iv.encode("utf-8")  # 初始化偏移量
        self.length = 16  # 初始化数据块大小
        self.aes = AES.new(self.key, AES.MODE_CBC, self.iv)  # 初始化AES,ECB模式的实例
        # 截断函数，去除填充的字符
        self.unpad = lambda s: s[0:-s[-1]]

    def pad(self, text):
        """
        填充函数，使被加密数据的字节码长度是block_size的整数倍
        """
        count = len(text.encode('utf-8'))
        add = self.length - (count % self.length)
        entext = text + (chr(add) * add)
        return entext

    def encrypt(self, encrData):  # 加密函数
        a = self.pad(encrData)
        res = self.aes.encrypt(a.encode("utf-8"))
        msg = str(base64.b64encode(res), encoding="utf8")
        return msg

    def decrypt(self, decrData):  # 解密函数
        res = base64.decodebytes(decrData.encode("utf-8"))
        msg_text = self.aes.decrypt(res)
        decrypt_text = self.unpad(msg_text).decode('utf8')
        return decrypt_text


if __name__ == '__main__':
    aes_key = "0CoJUm6Qyw8W8jud"
    aes_iv = "9999999999999999"
    text_data = '45-127-47-43-112-121-120-124-121-121-127-122-122-122-44-123-112-122-123-122-123-122-44-123-113-122-126-122-120-122-44-123-113-122-120-122-120-122-47-47-47-47-45-47-47-112-113-44-122-42-121-124-121-121-121-121-121-121-121-121-124-121-113-125-113-124-113-124-113-124-126-45-124-126-121-42-124-113-122-42-120-121-113-125-126-121-43-113-127-127-127-43-125-126-121-42-124-113-121-123-125-42-122-113-113-125-124-45-47-47-123-44-112-113-127-112-123-120-40-43-120-125-112-47-112-113-112-125-121-121-121-121-121-123-121-121-113-43-120-125-40-45-112-113-113-125-120-47-112-113-113-125-126-44-112-113-113-125-122-124-122-124-122-112-113-125-124-45-47-47-124-44-122-124-125-40-113-124-40-43-120-125-121-121-121-121-121-121-121-125-112-43-120-125-121-121-121-121-121-120-121-121-113-43-120-125-121-121-121-125-121-121-121-121-40-43-112-42-120-122-113-125-124-45-47-47-127-124-123-40-124-43-121-47-44-43-120-125-121-121-43-125-47-112-42-44-112-47-42-42-43-43-47-125-43-44-127-126-124-124-120-113-125-113-124-112-112-121-124-45-112-121-45-43-122-122-121-122-127-123-123-127-126-124-126-40-121-121-44-42-45-126-45-124-123-47-44-113-43-47-112-126-121-42-45-123-121-127-42-121-123-125-112-43-125-127-112-125-127-113-112-43-113-42-47-120-112-112-122-45-47-127-40-45-42-127-122-126-126-40-122-47-43-122-112-120-123-124-122-44-44-125-124-40-123-122-126-121-40-127-124-125-44-43-113-123-120-122-123-124-122-42-127-43-45-44-40-112-40-122-42-121-112-123-125-127-42-47-122-113-43-113-127-43-125-127-43-126-43-112-123-125-121-123-45-112-120-126-45-124-124-47-43-125-42-47-121-47-113-43-127-47-43-125-123-40-44-112-120-125-123-127-113-122-112-42-113-123-42-124-40-124-127-42-43-125-44-112-40-44-44-47-127-124-123-42-112-125-125-125-42-127-47-125-124-125-113-42-44-113-113-123-125-126-126-43-42-120-127-47-40-113-120-42-45-113-122-125-126-42-43-127-45-40-120-113-125-43-120-124-124-123-112-124-124-120-126-113-44-123-126-125-120-47-127-42-112-40-44-42-122-123-125-42-122-125-45-43-40-124-40-127-126-112-123-42-125-112-42-127-42-125-43-125-113-44-121-47-40-126-45-47-44-47-122-120-42-45-123-42-47-45-123-124-113-127-44-42-42-113-126-42-122-47-121-125-44-112-125-123-127-126-47-42-126-125-42-124-47-43-112-40-43-121-44-124-44-125-124-124-113-112-44-124-112-121-44-45-121-121-40-121-45-121-112-123-47-127-43-127-122-127-124-127-126-125-121-123-124-127-43-127-112-127-42-127-121-123-42-123-42-125-45-125-125-124-113-125-43-125-113-123-121-123-127-122-122-122-44-123-126-122-122-122-124-122-47-123-125-126-112-127-43-125-123-127-124-127-126-124-124-127-42-127-121-126-121-126-120-125-121-123-112-123-120-122-44-123-127-122-121-123-125-124-44-125-121-123-122-126-126-126-47-127-125-127-44-127-112-127-126-124-113-123-121-123-121-122-44-123-124-122-47-123-120-127-42-127-42-127-112-127-40-126-47-127-45-125-121-123-40-122-125-126-44-127-124-127-126-127-120-125-45-123-123-126-124-127-122-126-124-124-40-121-45-121-40-123-47-123-40-123-121-123-40-122-125-126-121-126-124-127-122-127-122-127-120-125-40-121-45-121-45-127-47-127-122-127-44-123-124-127-127-126-112-127-42-127-44-123-43-127-47-127-47-127-42-127-125-126-124-126-47-127-121-123-40-122-125-126-122-126-47-127-113-125-121-121-120-121-44-126-42-123-125-112-43-42-121-43-121-45-112-120-125-40-112-121-121-121-44-112-112-121-47-121-40-112-113-40-124-122-113-40-126-40-45-124-123-127-43-40-124-126-120-122-42-47-113-121-112-121-44-43-126-42-127-47-45-44-44-121-125-43-121-112-126-44-44-43-113-112-44-127-120-44-120-124-120-124-125-45-112-44-124-125-47-121-112-126-120-120-44-45-125-127-43-43-124-121-40-40-120-126-40-112-42-43-42-42-47-120-40-124-125-123-47-122-45-123-125-40-121-121-112-124-122-120-112-43-123-126-123-47-121-125-124-125-123-112-42-43-124-45-124-44-121-121-122-127-121-126-123-124-47-123-47-47-47-47-47-47-123-40-113-44-121-121-121-121-120-121-125-44-112-44-122-45-43-44-121-121-121-121-120-121-42-113-125-113-47-121-47-42-47-47-113-125-121-121-121-121-120-121-45-112-124-113-47-121-121-42-124-113-124-45-47-47-43-126-113-120-127-121-45-123-40-43-120-125-123-124-123-124-112-42-120-122-45-125-47-47-47-47-47-47-47-47-121-42-126-42-112-125-40-45-112-113-113-125-120-47-112-113-113-125-47-124-40-121-40-127-121-124-122-42-122-113-113-125-127-42-112-113-113-125-124-45-47-47-43-122-44-123-124-124-43-44-40-43-120-125-123-124-123-124-125-113-121-125-123-121-121-121-113-127-123-124-112-42-120-122-45-125-113-45-112-113-112-125-123-45-120-122-113-125-120-42-112-113-113-125-43-124-112-124-43-44-124-45-47-47-127-42-47-112-112-113-126-124-40-43-120-125-120-124-120-125-122-121-40-127-120-124-120-125-120-124-120-125-112-42-120-122-45-125-121-121-121-121-124-123-123-42-113-43-120-125-120-42-112-113-113-125-40-124-122-126-43-44-124-45-47-47-126-40-112-126-127-124-40-122-40-43-120-125-121-124-120-125-121-124-120-125-112-42-120-122-45-125-121-42-120-122-45-125-123-45-120-122-113-125-112-42-120-122-113-125-124-45-47-47-126-121-127-123-126-126-42-125-40-43-120-125-120-47-112-113-42-125-127-44-112-113-112-125-127-124-120-125-121-121-125-126-124-127-44-127-112-127-44-127-112-127-126-126-44-43-112-125-121-121-40-127-45-124-47-47-47-47-47-47-47-125-112-44-123-120-43-113-113-125-40-124-112-124-120-125-113-124-121-44-47-47-123-124-120-125-121-123-42-44-122-113-113-125-40-124-120-125-112-124-120-125-113-124-120-125-40-124-112-124-44-124-113-124-120-125-113-124-120-125-121-45-120-121-113-125-113-113-125-121-43-113-120-125-121-45-120-121-112-125-42-120-121-125-43-113-125-125-113-125-42-121-43-113-120-125-127-127-121-45-120-121-112-125-125-123-121-125-43-113-125-125-113-124-113-45-124-126-120-45-112-122-124-125-113-121-125-123-42-125-122-121-42-125-120-47-124-126-121-44-113-122-120-42-120-121-120-125-45-121-112-42-120-42-120-125-42-40-121-42-120-122-113-125-112-42-120-122-45-125-127-45-120-121-113-125-113-113-125-122-43-113-120-125-112-42-47-47-113-125-127-124-122-44-121-45-120-121-112-125-121-123-121-125-43-113-125-125-113-120-113-125-43-113-121-124-121-45-120-121-113-125-126-127-125-126-121-42-124-113-113-125-121-121-121-121-121-121-113-113-121-113-43-113-123-126-124-126-123-121-43-121-113-120-113-126-120-113-127-127-121-45-120-121-113-125-42-122-123-125-43-113-121-123-123-124-43-113-113-125-120-124-120-125-123-124-45-44-123-44-120-42-120-121-120-125-45-121-112-42-120-42-120-125-121-123-42-123-123-121-42-126-120-127-42-122-42-40-121-42-120-122-113-125-112-42-120-122-45-125-40-125-40-125-126-43-47-121-113-125-121-124-123-126-43-113-113-125-121-123-123-124-43-113-113-125-113-120-123-124-43-113-113-125-121-127-123-124-43-113-113-125-124-127-123-45-120-122-113-125-127-124-120-124-123-124-121-124-120-125-120-124-120-125-121-121-121-121-121-121-113-42-113-44-121-47-125-44-122-113-113-125-42-47'
    encrypt_data = EncryptDate(aes_key, aes_iv).encrypt(text_data)
    print("原始数据:", text_data)
    print("加密后数据:", encrypt_data)

